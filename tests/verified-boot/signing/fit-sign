#!/usr/bin/env python2

#  Copyright (c) 2014-present, Facebook, Inc.
#  All rights reserved.
#
#  This source code is licensed under the BSD-style license found in the
#  LICENSE file in the root directory of this source tree. An additional grant
#  of patent rights can be found in the PATENTS file in the same directory.

import os
import tempfile
import argparse
import StringIO
import sys
import time

from distutils import spawn

from pyfdt import pyfdt


def write_content(offset, data):
    with open(args.output, 'a') as fh:
        fh.seek(offset)
        fh.write(data)


def write_firmware(filename):
    with open(filename) as fh:
        signed_content = fh.read()

    write_content(args.offset, signed_content)
    padding = args.max_size - len(signed_content)
    write_content(args.offset + len(signed_content), '\0' * padding)


def write_os(filename):
    with open(filename) as fh:
        signed_content = fh.read()
        write_content(args.os, signed_content)


def inject_subordinate(unsigned_content, path):
    with open(path, 'rb') as fh:
        sub_data = fh.read()
        # Read the subordinate key store as a FDT.
        sub_fdt = get_fdt(sub_data)

    fdt = get_fdt(unsigned_content)

    pubkey = sub_fdt.resolve_path('/images/fdt@1')
    if pubkey is None:
        print("Subordinate key store does not contain /images/fdt@1")
        sys.exit(1)

    keys = fdt.resolve_path('/keys')
    if keys is None:
        print("The firmware does not contain a /keys subnode")
        # This does not have a keys subnode.
        keys = pyfdt.FdtNode('keys')
        fdt.get_rootnode().add_subnode(keys)

    existing_keys = fdt.resolve_path('/keys/fdt@1')
    if existing_keys is not None:
        print("Note: Removing existing signing KEK key store")
        fdt.resolve_path('/keys').remove('fdt@1')

    keys.append(pubkey)
    return fdt.to_dtb()


def inject_kek(rom_fit, path):
    # Open the path to the ROM/KEK public keys
    with open(path) as fh:
        kek_data = fh.read()
        kek_fdt = get_fdt(kek_data)

    kek_keys = kek_fdt.resolve_path('/signature')
    if kek_keys is None:
        print("ROM KEK key store does not contain /signature")
        sys.exit(1)

    fdt = get_fdt(rom_fit)
    existing_kek_keys = fdt.resolve_path('/signature')
    if existing_kek_keys is not None:
        print("Note: Removing existing ROM KEK key store")
        fdt.resolve_path('/').remove('signature')

    fdt.get_rootnode().add_subnode(kek_keys)
    return fdt.to_dtb()


def sign_firmware(dts):
    # Perform signing.
    with tempfile.NamedTemporaryFile(delete=False) as tmp:
        tmp.write(dts)
        tmp.flush()
        with tempfile.NamedTemporaryFile(delete=False) as tmp2:
            print(" ".join([args.mkimage, "-f", tmp.name, "-E",
                "-k", args.keydir,
                "-p", "%08x" % args.size, "-r", tmp2.name]))
            spawn.spawn(
                [args.mkimage, "-f", tmp.name, "-E", "-k", args.keydir,
                    "-p", "%08x" % args.size, "-r", tmp2.name])
            info = os.stat(tmp2.name)
            if info.st_size <= 0:
                print("mkimage failed")
                return 1
            if info.st_size > args.max_size:
                print("mkimage generated an output U-Boot exceeding %08x" % (
                    args.max_size))
                return 1
            write_firmware(tmp2.name)
    return 0


def sign_os(dts):
    with tempfile.NamedTemporaryFile(delete=False) as tmp:
        tmp.write(dts)
        tmp.flush()
        with tempfile.NamedTemporaryFile(delete=False) as tmp2:
            print(" ".join([args.mkimage, "-f", tmp.name,
                "-k", args.keydir, "-r", tmp2.name]))
            spawn.spawn(
                [args.mkimage, "-f", tmp.name, "-k", args.keydir,
                    "-r", tmp2.name])
            info = os.stat(tmp2.name)
            if info.st_size <= 0:
                print("mkimage failed")
                return 1
            write_os(tmp2.name)
    return 0


def set_algorithms(fdt, path):
    # Override the requested hashing and signing algorithms.
    algo = fdt.resolve_path("%s/signature@1/algo" % (path))
    algo.strings = ['sha256,rsa4096']
    return 0


def set_hint(fdt, path):
    # We are not validating the FIT, but checking basic sanity.
    hint = fdt.resolve_path("%s/signature@1/key-name-hint" % (path))
    if hint is None:
        print("FIT does not include a signature node (%s)" % (path))
        return 1

    # The U-Boot FIT expects to be signed with the following key-name.
    # This will cause mkimage to file if the names do not match.
    key_name = hint[0]
    requested_key_name = os.path.basename(args.keydir)
    if key_name != requested_key_name:
        print("Note: The FIT key-name-hint (%s) does not match keydir (%s)" % (
            key_name, requested_key_name))
        hint.strings = [requested_key_name]
    return 0


def set_sign(fdt, path, images):
    new_prop = pyfdt.FdtPropertyStrings('sign-images', images)
    config = fdt.resolve_path("%s/signature@1" % path)
    try:
        config.remove('sign-images')
    except ValueError:
        pass

    config.subdata.insert(0, new_prop)


def get_fdt(content):
    # Represent the FIT as an IO resource.
    fit_io = StringIO.StringIO(content)
    dtb = pyfdt.FdtBlobParse(fit_io)
    fdt = dtb.to_fdt()
    return fdt


def write_test_fdt(data, fdt):
    write_content(0x0, data[0:args.offset])
    new_content = fdt.to_dtb()
    write_content(args.offset, new_content)
    padding = args.size - len(new_content)
    write_content(args.offset + len(new_content), '\0' * padding)

    offset = args.size + args.offset
    write_content(offset, data[offset:])


def main():
    with open(args.filename, 'rb') as fh:
        data = fh.read()
        # Extract the FIT describing U-Boot
        uboot_fit = data[args.offset:args.offset + args.size]
        rom = data[0:args.rom_size]

    if args.test_remove_timestamp:
        fdt = get_fdt(uboot_fit)
        fdt.get_rootnode().remove('timestamp')
        write_test_fdt(data, fdt)
        return 0

    if args.test_change_timestamp:
        fdt = get_fdt(uboot_fit)
        timestamp = fdt.resolve_path('/timestamp')
        timestamp.words = [time.time()]
        write_test_fdt(data, fdt)
        return 0

    rom_fit = None
    rom_fit_offset = 0
    for i in range(args.rom_size / 4):
        if data[i * 4:(i * 4) + 4] == "\xd0\x0d\xfe\xed":
            rom_fit = rom[i * 4:(i * 4) + args.rom_fit_size]
            rom_fit_offset = i * 4
            break
    if rom_fit is None:
        print("Cannot find FIT region within ROM")
        sys.exit(1)

    rom_content_pre = data[0:rom_fit_offset]
    rom_fit = inject_kek(rom_fit, args.kek)
    rom_fit += '\x00' * (3200 - len(rom_fit))
    rom_content_post = data[rom_fit_offset + 3200:args.rom_size]
    data = rom_content_pre + rom_fit + rom_content_post + data[args.rom_size:]

    if args.signed_subordinate is not None:
        updated_fit = inject_subordinate(uboot_fit, args.signed_subordinate)
        uboot_fit = updated_fit

    fdt = get_fdt(uboot_fit)

    # Timestamp's existance will cause FDT_ERR_NOSPACE errors
    try:
        fdt.get_rootnode().remove('timestamp')
    except ValueError:
        # Timestamp may not be present
        pass

    # The FIT should contain /images/firmware@1
    firmware = fdt.resolve_path('/images/firmware@1')
    if firmware is None:
        print("Firmware does not contain a FIT with /images/firmware@1")
        sys.exit(1)

    # The content of U-Boot is stored external to the FIT.
    offset = fdt.resolve_path('/images/firmware@1/data-position')
    position = int(offset[0])
    offset = fdt.resolve_path('/images/firmware@1/data-size')

    # Assure size is mod(4).
    size = int(offset[0])
    size = size + (4 - (size % 4))
    offset.words[0] = size

    if position <= 0 or size <= 0:
        print("Firmware U-Boot position is unknown /images/firmware@1")
        sys.exit(1)

    # Extract the firmware content and attach, for signing.
    uboot = data[args.offset + position:args.offset + position + size]
    new_prop = pyfdt.FdtPropertyWords.init_raw('data', uboot)
    firmware.subdata.insert(0, new_prop)

    set_algorithms(fdt, '/configurations/conf@1')
    set_hint(fdt, '/configurations/conf@1')
    set_sign(fdt, '/configurations/conf@1', ['firmware'])

    try:
        os.remove(args.output)
    except OSError:
        pass
    write_content(0x0, data[0:args.offset])
    ret = sign_firmware(fdt.to_dts())
    if ret == 1:
        return 1

    if args.sign_os:
        os_fit = data[args.os:]
        fdt = get_fdt(os_fit)

        # Again, this node will cause FDT_ERR_NOSPACE errors
        fdt.get_rootnode().remove('timestamp')

        config = fdt.resolve_path('/configurations/conf@1')
        if config is None:
            print("OS FIT does not contain a configuration")
            return 1

        set_algorithms(fdt, '/configurations/conf@1')
        set_hint(fdt, '/configurations/conf@1')

        ret = sign_os(fdt.to_dts())
        if ret == 1:
            return 1
    else:
        write_content(args.os, data[args.os:])

    print("Wrote signed firmware: %s" % (args.output))
    return 0


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Example sign')
    parser.add_argument('filename', help="Input firmware")
    parser.add_argument('output', help="Output firmware")
    parser.add_argument('--kek', default=None, metavar="PATH",
        help="Location to ROM kek certificate store DTS", required=True)
    parser.add_argument('--rom-size', default=84 * 1024,
        help="Size of ROM region")
    parser.add_argument('--rom-fit-size', default=3200,
        help="Size of the ROM FIT region")
    parser.add_argument('--offset', default=0x080000, type=int,
        help="Location within filename to find firmware FIT DTB")
    parser.add_argument('--size', default=0x4000, type=int,
        help="Size of FIT (DTB)")
    parser.add_argument('--max_size', default=0x60000, type=int,
        help="Max size of FIT and data content")
    parser.add_argument('--os', default=0xe0000, type=int,
        help="Location within filetime to find OS (kernel,rootfs) FIT DTB")
    parser.add_argument("--sign-os", default=False, action="store_true",
        help="Sign kernel and rootfs")
    parser.add_argument('--signed-subordinate', default=None, metavar="PATH",
        help="Optional path to signed subordinate certificate store (to add)")
    parser.add_argument('--keydir', required=True, metavar="DIR",
        help="Required path to directory containing '.key' private key")
    parser.add_argument('--mkimage', required=True, metavar="PATH",
        help="Required path to mkimage")
    parser.add_argument('--test-remove-timestamp', default=False,
        action='store_true',
        help='For testing, remove the timestamp node')
    parser.add_argument('--test-change-timestamp', default=False,
        action='store_true',
        help='For testing, alter the timestamp node')
    args = parser.parse_args()

    if not os.path.isdir(args.keydir):
        print("The --keydir must be a directory containing a '.key' key.")
        sys.exit(1)
    keyfile = os.path.join(args.keydir, os.path.basename(args.keydir) + ".key")
    if not os.path.exists(keyfile):
        print("Cannot find private key: %s" % (keyfile))
        sys.exit(1)

    sys.exit(main())
